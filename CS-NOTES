🏆 Significance of C#
✅ Flagship Language for .NET
 Developed by Microsoft specifically for building applications on the .NET ecosystem (desktop, web, cloud, mobile, game).


🔁 Unified Across Platforms
 With .NET Core/.NET 6+, C# allows cross-platform development (Windows, Linux, macOS).


🚀 Modern and Future-Ready
 Includes modern constructs like async/await, LINQ, records, and pattern matching.


🎮 Game Development
 C# is the primary scripting language for Unity, one of the most popular game engines.


☁️ Strong Azure Integration
 First-class support for Microsoft Azure cloud services.


🏢 Enterprise-Scale Use
 Extensively used in corporate, government, healthcare, and banking sectors.



✨ Top Features of C# (Beyond Other OOP Languages)
Language-Integrated Query (LINQ)
 Enables querying collections with SQL-like syntax (unique to C#).


Async/Await Built-in
 Native and simple asynchronous programming compared to Java or C++.


Cross-Platform by Design
 With .NET Core and now .NET 6+, C# apps run on all major OS platforms.


Pattern Matching
 Modern switch expressions and powerful is pattern support.


Nullable Reference Types
 Helps eliminate null reference exceptions by design-time checks.


Smart Type Inference (var) & Tuples
 Cleaner and more concise code with structured return types.


Rich Standard Library
 Backed by a vast and powerful .NET Base Class Library (BCL).


Interoperability with Other Languages
 Can work seamlessly with C++, F#, and even JavaScript (via Blazor).


IDE Tooling (Visual Studio)
 Superior debugging, IntelliSense, code refactoring tools—best in class.


Attributes & Reflection
 Built-in support for metadata, dynamic code inspection, and AOP.


Value and Reference Types
 Efficient memory management with structs and classes.



🔍 How C# Stands Out from Other OOP Languages
Feature
C#
Java
C++
Python
Platform Support
Cross-platform (.NET)
Cross-platform (JVM)
OS-dependent
Cross-platform
Async/Await
Native & intuitive
Requires libraries
Complex (via threads)
Built-in but less structured
LINQ
✅ Built-in
❌
❌
❌
Memory Management
Automatic GC
Automatic GC
Manual
Automatic GC
Game Development
Unity support
Limited
Unreal (C++)
Pygame (basic)
IDE & Tooling
Visual Studio
IntelliJ, Eclipse
Visual Studio, Qt
VS Code, PyCharm
Web Frontend in C#
Blazor
❌
❌
Django/Flask (backend)
Native GUI Dev
WPF, WinForms, MAUI
JavaFX (weak adoption)
Qt, MFC
Tkinter, PyQt (slower)


🕰️ Brief History of C#
2000: Introduced by Anders Hejlsberg at Microsoft.


2002: C# 1.0 released with .NET Framework 1.0.


2005: C# 2.0 introduces Generics.


2007: C# 3.0 adds LINQ and lambda expressions.


2010: C# 4.0 adds dynamic types.


2012: C# 5.0 introduces async and await.


2015–2020: C# 6, 7, 8 add pattern matching, tuples, nullable ref types.


2021+: C# 9, 10, 11+ introduce record types, improved pattern matching, source generators, and more.
1)numerical data types
Type
Size
Range
Example
int
4 bytes
-2,147,483,648 to 2,147,483,647
int x = 100;
long
8 bytes
Very large range
long l = 123456789L;
float
4 bytes
±1.5e−45 to ±3.4e38
float f = 5.75f;
double
8 bytes
±5.0e−324 to ±1.7e308
double d = 19.99;
decimal
16 bytes
High precision
decimal price = 19.95m;
byte
1 byte
0 to 255
byte b = 255;
sbyte
1 byte
-128 to 127
sbyte sb = -100;


 Text-Based Data Types
char: Represents a single Unicode character

char letter = 'A';

string name = "Rafi";

3️⃣ Converting Strings to Numbers and Boolean
string s = "123";
int num = Convert.ToInt32(s);      // or int.Parse(s);
double d = Convert.ToDouble("3.14");

string b = "true";
bool value = Convert.ToBoolean(b);  // returns true

int x = 42;
string str = x.ToString();         // "42"

4️⃣ Operators

Type
Operators
Example
Arithmetic
+, -, *, /, %
a + b, a % b
Assignment
=, +=, -=, *=, /=
x += 5
Comparison
==, !=, >, <, >=, <=
x == y
Logical
&&, `



5️⃣ Concatenation
string firstName = "Rafi";
string lastName = "Ahmed";
string fullName = firstName + " " + lastName;  // Rafi Ahmed


6️⃣ Remainder Operator (%)
int result = 10 % 3;  // result = 1



7️⃣ var Keyword
Implicitly typed local variable – compiler infers the type:
var age = 25;        // age is an int
var name = "Rafi";   // name is a string

8️⃣ const Keyword
Used to declare constants (value cannot be changed):

const double PI = 3.14159;

9️⃣ Console Input and Output
✅ output
Console.WriteLine("Hello, World!");
Console.Write("This is on the same line");
✅ Input
Console.Write("Enter your name: ");
string name = Console.ReadLine();

Console.Write("Enter your age: ");
int age = Convert.ToInt32(Console.ReadLine());

Console.WriteLine($"Hello {name}, you are {age} years old.");


Conditional operators

 1. Ternary Operator (?:)
condition ? expression_if_true : expression_if_false;

int age = 20;
string status = (age >= 18) ? "Adult" : "Minor";
Console.WriteLine(status); // Output: Adult

2. Null-coalescing Operator (??)
Returns the left-hand operand if it’s not null; otherwise, it returns the right-hand operand.
var result = value ?? defaultValue;

string name = null;
string finalName = name ?? "Guest";
Console.WriteLine(finalName); // Output: Guest



3. Null-coalescing Assignment Operator (??=)
Assigns the right-hand value to the left-hand variable only if the left-hand variable is null.
value ??= defaultValue;

string name = null;
name ??= "Guest";
Console.WriteLine(name); // Output: Guest

 4. Logical Conditional Operators
These are used to combine Boolean expressions:
&& — Logical AND


|| — Logical OR


! — Logical NOT
int a = 10, b = 20;

if (a > 5 && b > 15)
{
    Console.WriteLine("Both conditions are true");
}

 5. Relational Operators (used in conditions)
== (Equal to)


!= (Not equal to)


> (Greater than)


< (Less than)


>= (Greater than or equal to)


<= (Less than or equal to)
if (score >= 50)
{
    Console.WriteLine("Passed");
}





TryParse is a method provided by many value types (like int, double, DateTime, etc.) in C#.
Convert a string representation of a value into its typed equivalent.

Return true if conversion succeeds, false if it fails — without throwing an exception.

Output the converted value via an out parameter.
example:
bool Type.TryParse(string input, out Type result);

using System;

class Program
{
    static void Main()
    {
        string strNumber = "123";
        int number;

        if (int.TryParse(strNumber, out number))
        {
            Console.WriteLine($"Parsing succeeded: {number}");
        }
        else
        {
            Console.WriteLine("Parsing failed");
        }
    }
}
Output:Parsing succeeded: 123

FizzBuzz Game
using System;

public class FizzBuzzGame
{
    public static void Main(string[] args)
    {
        Console.WriteLine("Welcome to the FizzBuzz Game!");
        Console.WriteLine("-----------------------------");

        int maxNumber;
        bool isValidInput = false;

        // Loop until valid input is received
        do
        {
            Console.Write("Please enter a positive integer (up to which FizzBuzz will be played): ");
            string input = Console.ReadLine();

            // Try to parse the input as an integer
            if (int.TryParse(input, out maxNumber))
            {
                // Check if the number is positive
                if (maxNumber > 0)
                {
                    isValidInput = true;
                }
                else
                {
                    Console.WriteLine("Invalid input: Please enter a positive integer.");
                }
            }
            else
            {
                Console.WriteLine("Invalid input: Please enter a whole number.");
            }
        } while (!isValidInput);

        Console.WriteLine($"\nStarting FizzBuzz up to {maxNumber}...\n");

        // Iterate from 1 to the user-provided maximum number
        for (int i = 1; i <= maxNumber; i++)
        {
            // Check divisibility by both 3 and 5 first
            if (i % 3 == 0 && i % 5 == 0)
            {
                Console.WriteLine("FizzBuzz");
            }
            // Check divisibility by 3
            else if (i % 3 == 0)
            {
                Console.WriteLine("Fizz");
            }
            // Check divisibility by 5
            else if (i % 5 == 0)
            {
                Console.WriteLine("Buzz");
            }
            // If not divisible by 3 or 5, print the number itself
            else
            {
                Console.WriteLine(i);
            }
        }

        Console.WriteLine("\nFizzBuzz game finished. Press any key to exit.");
        Console.ReadKey(); // Keep the console window open until a key is pressed
    }
}

 1. String Formatting
 Used to insert values into a string with a specific format.
 Example:
 string result = string.Format("Hello {0}, you have {1} messages", "John", 5);
 Output: Hello John, you have 5 messages
 Example with number formatting:
 double price = 1234.5678;
 Console.WriteLine(string.Format("Price: {0:C}", price)); // Currency format

 2. String Interpolation
 A more readable way to format strings (introduced in C# 6).
 Example:
 string name = "Alice";
 int age = 25;
 Console.WriteLine($"Name: {name}, Age: {age}");
 Output: Name: Alice, Age: 25

 3. String Concatenation
 Joining two or more strings.
 Example:
 string s1 = "Hello";
 string s2 = "World";
 // Using +
 string result1 = s1 + " " + s2;
 // Using Concat method
 string result2 = string.Concat(s1, " ", s2);
 // Using String.Join
 string result3 = string.Join(" ", s1, s2);

 4. Empty String
 An empty string contains zero characters: ""
 Example:
 string emptyStr = "";
 Console.WriteLine(emptyStr.Length); // Output: 0

 5. String Function: Equals()
 Used to compare two strings (case-sensitive by default).
 Example:
 string a = "Hello";
 string b = "hello";
 Console.WriteLine(a.Equals(b)); // False
 Console.WriteLine(a.Equals(b, StringComparison.OrdinalIgnoreCase)); // True

6. String Iteration
 Loop through each character in a string.
 Example:
 string word = "Test";
 foreach (char ch in word)
 {
 Console.WriteLine(ch);
 }

 7. String Null or Empty Check
 Use string.IsNullOrEmpty() or string.IsNullOrWhiteSpace().
 Example:
 string str1 = null;
 string str2 = "";
 string str3 = " ";
 Console.WriteLine(string.IsNullOrEmpty(str1)); // True
 Console.WriteLine(string.IsNullOrEmpty(str2)); // True
 Console.WriteLine(string.IsNullOrWhiteSpace(str3)); // True

 8. String Reverse
 Strings are immutable, so you need to convert to a char[] or use LINQ.
 Example using Array.Reverse:
 string original = "Hello";
 char[] chars = original.ToCharArray();
 Array.Reverse(chars);
 string reversed = new string(chars);
 Console.WriteLine(reversed); // olleH
 Example using LINQ:
 using System.Linq;
 string reversed2 = new string(original.Reverse().ToArray());
 Console.WriteLine(reversed2)
 9. Arrays
 Arrays store multiple values of the same type in a single variable.
 Example:
 int[] numbers = { 1, 2, 3, 4, 5 };
 Console.WriteLine(numbers[0]); // Output: 1

 10. Array Sorting
 Use Array.Sort() to sort an array in ascending order.
 Example:
 int[] arr = { 5, 3, 8, 1, 2 };
 Array.Sort(arr);
 foreach (int num in arr) Console.Write(num + " "); // Output: 1 2 3 5 8

11. Array Reversal
 Use Array.Reverse() to reverse the order of elements.
 Example:
 int[] arr2 = { 1, 2, 3, 4, 5 };
 Array.Reverse(arr2);
 foreach (int num in arr2) Console.Write(num + " "); // Output: 5 4 3 2 1

 12. Array Clearing
 Use Array.Clear() to set all elements to their default value.
 Example:
 int[] arr3 = { 1, 2, 3 };
 Array.Clear(arr3, 0, arr3.Length);
 foreach (int num in arr3) Console.Write(num + " "); // Output: 0 0 0

 13. Array IndexOf
 Use Array.IndexOf() to find the index of an element.
 Example:
 int[] arr4 = { 10, 20, 30, 40 };
 int index = Array.IndexOf(arr4, 30);
 Console.WriteLine(index); // Output: 2

 14. Lists
 Lists are dynamic arrays from System.Collections.Generic.
 Example:
 using System.Collections.Generic;
 List fruits = new List() { "Apple", "Banana" };
 fruits.Add("Orange");
 fruits.Remove("Banana");
 foreach (string fruit in fruits) Console.WriteLine(fruit);
 // Output: Apple Orange

 15. Dictionary
 A collection of key-value pairs.
 Example:
 using System.Collections.Generic;
 Dictionary students = new Dictionary();
 students.Add(1, "John");
 students.Add(2, "Alice");
 Console.WriteLine(students[1]); // Output: John
 foreach (var kvp in students)
 Console.WriteLine($"Key: {kvp.Key}, Value: {kvp.Value}")
